# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['iskaggle', 'import_kaggle', 'split_pkgspec', 'setup_install', 'setup_comp', 'nb_meta', 'push_notebook']

# Cell
import os,json,re,importlib,pkg_resources
from fastcore.utils import *

# Cell
iskaggle = os.environ.get('KAGGLE_KERNEL_RUN_TYPE', '')

# Cell
def import_kaggle():
    "Import kaggle API, using Kaggle secrets `kaggle_username` and `kaggle_key` if needed"
    if iskaggle:
        from kaggle_secrets import UserSecretsClient
        sec = UserSecretsClient()
        os.environ['KAGGLE_USERNAME'] = sec.get_secret("kaggle_username")
        if not os.environ['KAGGLE_USERNAME']: raise Exception("Please insert your Kaggle username and key into Kaggle secrets")
        os.environ['KAGGLE_KEY'] = sec.get_secret("kaggle_key")
    from kaggle import api
    return api

# Cell
def split_pkgspec(pkgspec):
    "Split install string into list of triples (pkg, operator, targetver)"
    # e.g. "fastcore>=1.4.5" "fastai" ==> ('fastcore','>=','1.4.5') ('fastai','>','0')
    pkg,*rest = re.split('(>=|<=|==|>|<)', pkgspec.replace('"', ''))
    try: operator,targetver = rest
    except: operator,targetver = ">" , "0"
    return (pkg, operator, targetver)


# Cell
def setup_install(install=''):
    "Set up python environment using pip-install to match string of pkgspecs"
    for pkgspec in install.replace('"', '').split():
        pkg, operator, targetver = split_pkgspec(pkgspec)

        try: oldver = pkg_resources.get_distribution(pkg).version
        except: pkg_resources.DistributionNotFound: oldver = '0'

        print('require', pkg, operator, targetver, '\n  found', oldver, end=',')
        if not eval(f"'{oldver}'{operator}'{targetver}'"):
            print(' installing...', end='')
            os.system(f'pip install -Uqq "{pkgspec}"')
            importlib.reload(pkg_resources)
            print( ' installed', pkg_resources.get_distribution(pkg).version, end=',')

        ver = __import__(pkg).__version__
        print(' active', ver)

# Cell
def setup_comp(competition, install=''):
    "Get a path to data for `competition`, downloading it if needed"
    setup_install(install)

    if iskaggle:
        return Path('../input')/competition
    else:
        path = Path(competition)
        from kaggle import api
        if not path.exists():
            import zipfile
            api.competition_download_cli(str(competition))
            zipfile.ZipFile(f'{competition}.zip').extractall(str(competition))
        return path

# Cell
def nb_meta(user, id, title, file, competition=None, private=True, gpu=False, internet=True):
    "Get the `dict` required for a kernel-metadata.json file"
    d = {
      "id": f"{user}/{id}",
      "title": title,
      "code_file": file,
      "language": "python",
      "kernel_type": "notebook",
      "is_private": private,
      "enable_gpu": gpu,
      "enable_internet": internet,
      "keywords": [],
      "dataset_sources": [],
      "kernel_sources": []
    }
    if competition: d["competition_sources"] = [f"competitions/{competition}"]
    return d

# Cell
def push_notebook(user, id, title, file, path='.', competition=None, private=True, gpu=False, internet=True):
    "Push notebook `file` to Kaggle Notebooks"
    meta = nb_meta(user, id, title, file=file, competition=competition, private=private, gpu=gpu, internet=internet)
    path = Path(path)
    nm = 'kernel-metadata.json'
    path.mkdir(exist_ok=True, parents=True)
    with open(path/nm, 'w') as f: json.dump(meta, f, indent=2)
    from kaggle import api
    api.kernels_push_cli(str(path))